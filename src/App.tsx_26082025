import { useState, useEffect, ChangeEvent } from "react";

type Recipe = {
  title: string;
  ingredients: string;
  instructions: string;
  image?: string;
};

function App() {
  const [recipes, setRecipes] = useState<Recipe[]>([]);
  const [newRecipe, setNewRecipe] = useState<Recipe>({
    title: "",
    ingredients: "",
    instructions: "",
    image: undefined,
  });
  const [showForm, setShowForm] = useState(false);
  const [editIndex, setEditIndex] = useState<number | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedRecipe, setSelectedRecipe] = useState<{
    recipe: Recipe;
    index: number;
  } | null>(null); // üîπ Rezept + Index f√ºr Aktionen

  useEffect(() => {
    const saved = localStorage.getItem("recipes");
    if (saved) setRecipes(JSON.parse(saved));
  }, []);

  useEffect(() => {
    localStorage.setItem("recipes", JSON.stringify(recipes));
  }, [recipes]);

  const saveRecipe = () => {
    if (editIndex !== null) {
      const updated = [...recipes];
      updated[editIndex] = newRecipe;
      setRecipes(updated);
      setEditIndex(null);
    } else {
      setRecipes([...recipes, newRecipe]);
    }
    setNewRecipe({ title: "", ingredients: "", instructions: "", image: undefined });
    setShowForm(false);
  };

  const editRecipe = (index: number) => {
    setNewRecipe(recipes[index]);
    setEditIndex(index);
    setShowForm(true);
    setSelectedRecipe(null); // beim Bearbeiten zur√ºck zur Startseite
  };

  const deleteRecipe = (index: number) => {
    if (confirm("Willst du dieses Rezept wirklich l√∂schen?")) {
      setRecipes(recipes.filter((_, i) => i !== index));
      setSelectedRecipe(null); // zur√ºck zur Startseite nach L√∂schen
    }
  };

  const handleImageUpload = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (event) => {
      const img = new Image();
      img.src = event.target?.result as string;
      img.onload = () => {
        const canvas = document.createElement("canvas");
        const maxSize = 300;
        let width = img.width;
        let height = img.height;

        if (width > height) {
          if (width > maxSize) {
            height = (height * maxSize) / width;
            width = maxSize;
          }
        } else {
          if (height > maxSize) {
            width = (width * maxSize) / height;
            height = maxSize;
          }
        }

        canvas.width = width;
        canvas.height = height;
        const ctx = canvas.getContext("2d");
        ctx?.drawImage(img, 0, 0, width, height);

        const compressedBase64 = canvas.toDataURL("image/jpeg", 0.7);
        setNewRecipe({ ...newRecipe, image: compressedBase64 });
      };
    };
    reader.readAsDataURL(file);
  };

  const exportRecipes = () => {
    const dataStr = JSON.stringify(recipes, null, 2);
    const blob = new Blob([dataStr], { type: "application/json" });
    const url = URL.createObjectURL(blob);

    const a = document.createElement("a");
    a.href = url;
    a.download = "unser-kochbuch.json";
    a.click();
    URL.revokeObjectURL(url);
  };

  const importRecipes = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (event) => {
      try {
        const imported = JSON.parse(event.target?.result as string);
        setRecipes(imported);
      } catch (err) {
        alert("Fehler beim Import der Datei!");
      }
    };
    reader.readAsText(file);
  };

  const filteredRecipes = recipes.filter(
    (r) =>
      r.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      r.ingredients.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div className="p-6 max-w-2xl mx-auto">
      <h1 className="text-3xl font-bold mb-6">üìñ Unser Kochbuch</h1>

      {/* Detailansicht */}
      {selectedRecipe ? (
        <div className="p-4 border rounded">
          <button
            onClick={() => setSelectedRecipe(null)}
            className="bg-gray-500 text-white px-3 py-1 rounded mb-4"
          >
            ‚¨ÖÔ∏è Zur√ºck
          </button>
          <h2 className="text-2xl font-bold">{selectedRecipe.recipe.title}</h2>
          {selectedRecipe.recipe.image && (
            <img
              src={selectedRecipe.recipe.image}
              alt={selectedRecipe.recipe.title}
              className="w-full max-h-64 object-cover rounded my-3"
            />
          )}
          <p>
            <strong>Zutaten:</strong> {selectedRecipe.recipe.ingredients}
          </p>
          <p className="mt-2">
            <strong>Anleitung:</strong> {selectedRecipe.recipe.instructions}
          </p>

          {/* üîπ Neue Buttons */}
          <div className="flex gap-3 mt-4">
            <button
              onClick={() => editRecipe(selectedRecipe.index)}
              className="bg-yellow-500 text-white px-3 py-1 rounded"
            >
              ‚úèÔ∏è Bearbeiten
            </button>
            <button
              onClick={() => deleteRecipe(selectedRecipe.index)}
              className="bg-red-600 text-white px-3 py-1 rounded"
            >
              üóëÔ∏è L√∂schen
            </button>
          </div>
        </div>
      ) : (
        <>
          {/* Startseite mit Buttons + Suche */}
          <div className="mb-6 flex flex-wrap gap-3">
            <button
              onClick={() => {
                setShowForm(!showForm);
                setEditIndex(null);
                setNewRecipe({ title: "", ingredients: "", instructions: "", image: undefined });
              }}
              className="bg-green-600 text-white px-4 py-2 rounded"
            >
              ‚ûï Rezept hinzuf√ºgen
            </button>
            <button
              onClick={exportRecipes}
              className="bg-blue-600 text-white px-4 py-2 rounded"
            >
              üì§ Exportieren
            </button>
            <label className="bg-purple-600 text-white px-4 py-2 rounded cursor-pointer">
              üì• Importieren
              <input
                type="file"
                accept="application/json"
                onChange={importRecipes}
                className="hidden"
              />
            </label>
            <input
              type="text"
              placeholder="üîç Rezept suchen..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="border p-2 flex-1 min-w-[200px]"
            />
          </div>

          {showForm && (
            <div className="mb-6 p-4 border rounded">
              <input
                type="text"
                placeholder="Titel"
                value={newRecipe.title}
                onChange={(e) =>
                  setNewRecipe({ ...newRecipe, title: e.target.value })
                }
                className="border p-2 w-full mb-2"
              />
              <textarea
                placeholder="Zutaten"
                value={newRecipe.ingredients}
                onChange={(e) =>
                  setNewRecipe({ ...newRecipe, ingredients: e.target.value })
                }
                className="border p-2 w-full mb-2"
              />
              <textarea
                placeholder="Anleitung"
                value={newRecipe.instructions}
                onChange={(e) =>
                  setNewRecipe({ ...newRecipe, instructions: e.target.value })
                }
                className="border p-2 w-full mb-2"
              />
              <input type="file" accept="image/*" onChange={handleImageUpload} />
              <button
                onClick={saveRecipe}
                className="bg-green-600 text-white px-4 py-2 rounded mt-3"
              >
                {editIndex !== null ? "√Ñnderungen speichern" : "Speichern"}
              </button>
            </div>
          )}

          {/* Galerie */}
          <div className="grid grid-cols-2 gap-4">
            {filteredRecipes.map((recipe, index) => (
              <div
                key={index}
                className="border rounded p-2 cursor-pointer hover:shadow-lg"
                onClick={() => setSelectedRecipe({ recipe, index })}
              >
                {recipe.image && (
                  <img
                    src={recipe.image}
                    alt={recipe.title}
                    className="w-full h-32 object-cover rounded"
                  />
                )}
                <h3 className="text-lg font-semibold mt-2 text-center">
                  {recipe.title}
                </h3>
              </div>
            ))}
            {filteredRecipes.length === 0 && (
              <p className="text-gray-500">Keine Rezepte gefunden.</p>
            )}
          </div>
        </>
      )}
    </div>
  );
}

export default App;
