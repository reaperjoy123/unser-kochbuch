/*
Kochbuch PWA – Startprojekt
===========================
So benutzt du diese Datei:
1) Diese React-Komponente ist der Kern deiner Kochbuch-App (CRUD, Suche, Kategorien, Offline über LocalStorage, Install-Button).
2) Um daraus eine PWA zu machen, lege zusätzlich die unten aufgeführten Dateien in deinem Projekt an.

── manifest.webmanifest ─────────────────────────────────────────
Speichere als: public/manifest.webmanifest
```
{
  "name": "Unser Kochbuch",
  "short_name": "Kochbuch",
  "start_url": ".",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#0ea5e9",
  "icons": [
    { "src": "/icons/icon-192.png", "sizes": "192x192", "type": "image/png" },
    { "src": "/icons/icon-512.png", "sizes": "512x512", "type": "image/png" }
  ]
}
```

── service-worker.js (einfache Offline-Strategie) ───────────────
Speichere als: public/service-worker.js
```
const CACHE_NAME = 'kochbuch-cache-v1';
const ASSETS = [
  '/',
  '/index.html',
  '/manifest.webmanifest'
  // Tipp: baue-zeitlich generierte Bundles (z.B. /assets/*.js, *.css) per Build-Skript auto-eintragen
];
self.addEventListener('install', (e) => {
  e.waitUntil(
    caches.open(CACHE_NAME).then((cache) => cache.addAll(ASSETS))
  );
});
self.addEventListener('activate', (e) => {
  e.waitUntil(
    caches.keys().then(keys => Promise.all(keys.filter(k => k !== CACHE_NAME).map(k => caches.delete(k))))
  );
});
self.addEventListener('fetch', (e) => {
  const req = e.request;
  // Network first für HTML, Cache first für Assets
  if (req.headers.get('accept')?.includes('text/html')) {
    e.respondWith(
      fetch(req).then(resp => {
        const copy = resp.clone();
        caches.open(CACHE_NAME).then(c => c.put(req, copy));
        return resp;
      }).catch(() => caches.match(req))
    );
  } else {
    e.respondWith(
      caches.match(req).then(cached => cached || fetch(req).then(resp => {
        const copy = resp.clone();
        caches.open(CACHE_NAME).then(c => c.put(req, copy));
        return resp;
      }))
    );
  }
});
```

── index.html (Ausschnitt) ───────────────────────────────────────
Füge im <head> ein (bei Vite/CRA/Next entsprechend anpassen):
```
<link rel="manifest" href="/manifest.webmanifest" />
<meta name="theme-color" content="#0ea5e9" />
```
Und registriere den Service Worker (z.B. in main.tsx / index.tsx):
```
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/service-worker.js');
  });
}
```

Hinweis: LocalStorage synchronisiert nicht zwischen Geräten; für Multi-Device-Sync nutzt du später z.B. Firebase/ Supabase. Diese Komponente ist so strukturiert, dass du die Persistence leicht austauschen kannst (siehe dataProvider).
*/

import { useEffect, useMemo, useRef, useState } from 'react';

// -------------------- Typen --------------------
type Recipe = {
  id: string;
  title: string;
  category: string;
  ingredients: string[];
  steps: string;
  createdAt: number;
  updatedAt: number;
};

// -------------------- Persistence Layer (austauschbar) --------------------
const STORAGE_KEY = 'kochbuch.recipes.v1';
const dataProvider = {
  load: (): Recipe[] => {
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      if (!raw) return [];
      const parsed = JSON.parse(raw) as Recipe[];
      return parsed.sort((a, b) => b.updatedAt - a.updatedAt);
    } catch {
      return [];
    }
  },
  save: (recipes: Recipe[]) => {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(recipes));
  }
};

// -------------------- Hilfsfunktionen --------------------
const uuid = () => crypto.randomUUID?.() || Math.random().toString(36).slice(2);
const normalize = (s: string) => s.toLowerCase().normalize('NFKD').replace(/\p{Diacritic}/gu, '');

// -------------------- Hauptkomponente --------------------
export default function KochbuchApp() {
  const [recipes, setRecipes] = useState<Recipe[]>(() => dataProvider.load());
  const [query, setQuery] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('');
  const [editing, setEditing] = useState<Recipe | null>(null);
  const [showForm, setShowForm] = useState(false);
  const [installPrompt, setInstallPrompt] = useState<any>(null);

  // beforeinstallprompt für eigene Install-Schaltfläche abfangen
  useEffect(() => {
    const handler = (e: any) => {
      e.preventDefault();
      setInstallPrompt(e);
    };
    window.addEventListener('beforeinstallprompt', handler as any);
    return () => window.removeEventListener('beforeinstallprompt', handler as any);
  }, []);

  // speichern, wenn sich Rezepte ändern
  useEffect(() => {
    dataProvider.save(recipes);
  }, [recipes]);

  // Kategorien dynamisch ermitteln
  const categories = useMemo(() => {
    const set = new Set<string>();
    recipes.forEach(r => r.category && set.add(r.category));
    return Array.from(set).sort((a, b) => a.localeCompare(b));
  }, [recipes]);

  // Filter + Suche
  const filtered = useMemo(() => {
    const q = normalize(query);
    return recipes.filter(r => {
      const inCat = !categoryFilter || r.category === categoryFilter;
      if (!q) return inCat;
      const hay = `${r.title} ${r.category} ${r.ingredients.join(' ')} ${r.steps}`;
      return inCat && normalize(hay).includes(q);
    });
  }, [recipes, query, categoryFilter]);

  const startCreate = () => { setEditing(null); setShowForm(true); };
  const startEdit = (r: Recipe) => { setEditing(r); setShowForm(true); };
  const remove = (id: string) => {
    if (!confirm('Rezept wirklich löschen?')) return;
    setRecipes(prev => prev.filter(r => r.id !== id));
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-sky-50 to-white text-slate-800">
      <header className="sticky top-0 z-10 backdrop-blur bg-white/70 border-b">
        <div className="max-w-5xl mx-auto px-4 py-3 flex items-center gap-3">
          <span className="text-2xl font-bold tracking-tight">🍲 Unser Kochbuch</span>
          <div className="ml-auto flex gap-2">
            <button
              className="px-3 py-1.5 rounded-xl border shadow-sm hover:shadow transition"
              onClick={startCreate}
            >
              + Rezept
            </button>
            <InstallButton installPrompt={installPrompt} />
          </div>
        </div>
      </header>

      <main className="max-w-5xl mx-auto px-4 py-6">
        <Toolbar
          query={query}
          setQuery={setQuery}
          category={categoryFilter}
          setCategory={setCategoryFilter}
          categories={categories}
        />

        {filtered.length === 0 ? (
          <EmptyState onCreate={startCreate} />
        ) : (
          <RecipeGrid
            recipes={filtered}
            onEdit={startEdit}
            onDelete={remove}
          />
        )}
      </main>

      {showForm && (
        <RecipeDialog
          initial={editing}
          onClose={() => setShowForm(false)}
          onSave={(data) => {
            if (editing) {
              setRecipes(prev => prev.map(r => r.id === editing.id ? { ...data, id: editing.id, createdAt: editing.createdAt, updatedAt: Date.now() } : r));
            } else {
              setRecipes(prev => [{ ...data, id: uuid(), createdAt: Date.now(), updatedAt: Date.now() }, ...prev]);
            }
            setShowForm(false);
          }}
        />
      )}

      <footer className="max-w-5xl mx-auto px-4 py-8 text-center text-sm text-slate-500">
        Offline-fähig (LocalStorage). Für Geräte-Sync ersetze dataProvider per Firebase/Supabase.
      </footer>
    </div>
  );
}

// -------------------- Toolbar --------------------
function Toolbar({ query, setQuery, category, setCategory, categories }:{
  query: string; setQuery: (v: string)=>void;
  category: string; setCategory: (v: string)=>void;
  categories: string[];
}) {
  return (
    <div className="mb-6 flex flex-col md:flex-row gap-3 items-stretch md:items-center">
      <input
        className="flex-1 px-3 py-2 rounded-xl border shadow-sm focus:outline-none focus:ring ring-sky-200"
        placeholder="Suche nach Titel, Zutat, Text…"
        value={query}
        onChange={(e)=>setQuery(e.target.value)}
      />
      <select
        className="px-3 py-2 rounded-xl border shadow-sm bg-white"
        value={category}
        onChange={(e)=>setCategory(e.target.value)}
      >
        <option value="">Alle Kategorien</option>
        {categories.map(c => <option key={c} value={c}>{c}</option>)}
      </select>
    </div>
  );
}

// -------------------- Grid --------------------
function RecipeGrid({ recipes, onEdit, onDelete }:{ recipes: Recipe[]; onEdit: (r:Recipe)=>void; onDelete:(id:string)=>void; }) {
  return (
    <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
      {recipes.map(r => (
        <article key={r.id} className="rounded-2xl border shadow-sm bg-white p-4 flex flex-col">
          <div className="flex items-start gap-2 mb-2">
            <h3 className="text-lg font-semibold flex-1 leading-tight">{r.title}</h3>
            <span className="text-xs px-2 py-1 rounded-full bg-sky-50 border text-sky-700">{r.category || 'Allgemein'}</span>
          </div>
          <div className="text-sm text-slate-600 mb-2 line-clamp-3">
            {r.steps}
          </div>
          <div className="text-xs text-slate-500 mb-3">{new Date(r.updatedAt).toLocaleDateString()}</div>
          <div className="mt-auto flex gap-2">
            <button className="px-3 py-1.5 rounded-xl bg-sky-600 text-white hover:bg-sky-700" onClick={()=>onEdit(r)}>Bearbeiten</button>
            <button className="px-3 py-1.5 rounded-xl border hover:bg-slate-50" onClick={()=>onDelete(r.id)}>Löschen</button>
          </div>
        </article>
      ))}
    </div>
  );
}

// -------------------- Dialog (Create/Edit) --------------------
function RecipeDialog({ initial, onClose, onSave }:{ initial: Recipe | null; onClose: ()=>void; onSave: (data: Omit<Recipe,'id'|'createdAt'|'updatedAt'>)=>void; }) {
  const [title, setTitle] = useState(initial?.title || '');
  const [category, setCategory] = useState(initial?.category || '');
  const [ingredients, setIngredients] = useState((initial?.ingredients || []).join('\n'));
  const [steps, setSteps] = useState(initial?.steps || '');
  const dialogRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const onKey = (e: KeyboardEvent) => { if (e.key === 'Escape') onClose(); };
    document.addEventListener('keydown', onKey);
    return () => document.removeEventListener('keydown', onKey);
  }, [onClose]);

  const save = () => {
    if (!title.trim()) return alert('Bitte einen Titel eingeben.');
    onSave({
      title: title.trim(),
      category: category.trim(),
      ingredients: ingredients.split(/\n+/).map(s => s.trim()).filter(Boolean),
      steps: steps.trim(),
      createdAt: 0 as any, // wird im Caller überschrieben
      updatedAt: 0 as any
    } as any);
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/20 p-4" role="dialog" aria-modal="true">
      <div ref={dialogRef} className="w-full max-w-2xl rounded-2xl bg-white shadow-xl border">
        <div className="p-4 border-b flex items-center">
          <h2 className="text-lg font-semibold">{initial ? 'Rezept bearbeiten' : 'Neues Rezept'}</h2>
          <button className="ml-auto px-3 py-1.5 rounded-xl border hover:bg-slate-50" onClick={onClose}>Schließen</button>
        </div>
        <div className="p-4 space-y-3">
          <div>
            <label className="block text-sm mb-1">Titel</label>
            <input className="w-full px-3 py-2 rounded-xl border shadow-sm" value={title} onChange={e=>setTitle(e.target.value)} />
          </div>
          <div className="grid md:grid-cols-2 gap-3">
            <div>
              <label className="block text-sm mb-1">Kategorie</label>
              <input className="w-full px-3 py-2 rounded-xl border shadow-sm" value={category} onChange={e=>setCategory(e.target.value)} placeholder="z.B. Hauptgerichte" />
            </div>
            <div>
              <label className="block text-sm mb-1">Zutaten (eine pro Zeile)</label>
              <textarea className="w-full px-3 py-2 rounded-xl border shadow-sm min-h-[120px]" value={ingredients} onChange={e=>setIngredients(e.target.value)} placeholder={"200 g Spaghetti\n100 g Speck\n2 Eier"} />
            </div>
          </div>
          <div>
            <label className="block text-sm mb-1">Zubereitung</label>
            <textarea className="w-full px-3 py-2 rounded-xl border shadow-sm min-h-[160px]" value={steps} onChange={e=>setSteps(e.target.value)} placeholder="Schritte…" />
          </div>
        </div>
        <div className="p-4 border-t flex gap-2 justify-end">
          <button className="px-4 py-2 rounded-xl border hover:bg-slate-50" onClick={onClose}>Abbrechen</button>
          <button className="px-4 py-2 rounded-xl bg-sky-600 text-white hover:bg-sky-700" onClick={save}>{initial ? 'Speichern' : 'Anlegen'}</button>
        </div>
      </div>
    </div>
  );
}

// -------------------- Empty State --------------------
function EmptyState({ onCreate }:{ onCreate: ()=>void }) {
  return (
    <div className="border rounded-2xl p-10 text-center bg-white shadow-sm">
      <div className="text-5xl mb-2">🧑‍🍳</div>
      <h3 className="text-xl font-semibold mb-2">Noch keine Rezepte</h3>
      <p className="text-slate-600 mb-4">Lege dein erstes Rezept an oder importiere später aus einer Datei.</p>
      <button className="px-4 py-2 rounded-xl bg-sky-600 text-white hover:bg-sky-700" onClick={onCreate}>+ Rezept anlegen</button>
    </div>
  );
}

// -------------------- Install Button --------------------
function InstallButton({ installPrompt }:{ installPrompt: any }) {
  if (!installPrompt && !(window.matchMedia && window.matchMedia('(display-mode: standalone)').matches)) {
    return (
      <button className="px-3 py-1.5 rounded-xl border shadow-sm text-slate-400 cursor-not-allowed" title="Installationsoption erscheint automatisch, wenn die PWA-Kriterien erfüllt sind">
        Installieren
      </button>
    );
  }
  const onClick = async () => {
    if (installPrompt) {
      installPrompt.prompt();
      await installPrompt.userChoice;
    } else {
      alert('Die App scheint bereits installiert zu sein.');
    }
  };
  return (
    <button className="px-3 py-1.5 rounded-xl border shadow-sm hover:shadow" onClick={onClick}>
      Installieren
    </button>
  );
}
